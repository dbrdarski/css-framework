
// =====================
// Column Grid Generator
// =====================

.new-column-grid(@len : @grid-columns, @gutter : @grid-gutter-width){

  .column(@screen, @i){
    &.@{screen}-@{i}{
      width: 100% / @len * @i;
      padding: 0 @gutter/2;
    }
  }
  .pull(@screen, @i){
    &.@{screen}-pull-@{i} {
        right: 100% / @len * @i;
    }
  }
  .push(@screen, @i){
    &.@{screen}-push-@{i} {
        left: 100% / @len * @i;
    }
  }
  .offset(@screen, @i){
    &.@{screen}-offset-@{i} {
      margin-left: 100% / @len * @i;
    }
  }

  .columns(@screen, @len){
    .range.map(@len,{
      .fn(@i){
        .column(@screen, @i);
        .push(@screen, @i);
        .pull(@screen, @i);
      }
    });
    .range.map(0 @len, {
      .fn(@i){
        .offset(@screen, @i);
      }
    });
  } 

  &{
    position: relative;
    min-height: 1px;
    padding-left: 15px;
    padding-right: 15px;
    float: left;
    width: 100%;
  }

  .media.map(min, {
    .fn(@screen){
      .columns(@screen, @len)
    }
  });
}


// ====================
// Block Grid Generator
// ====================

.new-block-grid(@len : @grid-columns, @gutter : @grid-gutter-width){

  .column(@screen, @i, @gutter){
    &.@{screen}-@{i}>.block{
      width: 100% / @i;
      &:nth-child(n){
        clear: none;
      }
      &:nth-child(@{i}n+1){
        clear: both;
      }
    }  
  }

  .columns(@screen, @len){
    .range.map(@len, {
      .fn(@i){
        .column(@screen, @i, @gutter);
      }
    });
  }
  
  .clearfix;

  > .block{
    float: left;
    padding: 0 @gutter/2;
  }

  .media.map(min, {
    .fn(@screen){
      .columns(@screen, @len)
    }
  });
}