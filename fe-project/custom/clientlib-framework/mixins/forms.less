.ctrl-size{
  .each(@sizes, @template){
    .map.each(@sizes, {
      .fn(@key, @val){
        &.size-@{key}{
          .ctrl-size(@val, @template);
        }
      }
    });
  }
}
.ctrl-size(@font-base, @template : @fn){
  .template(@size-ratio : 1; @line-height: 1.25; @padding: .875 1.25){
    @ratio : @size-ratio;
    @line-height-computed: @line-height;
    .padding(@padding);
    .padding-compute();
  }
  .padding(@padding) when (length(@padding) >= 1){
    @padding-top: extract(@padding, 1);
    @padding-right: extract(@padding, 1);
    @padding-bottom: extract(@padding, 1);
    @padding-left: extract(@padding, 1);
  }
  .padding(@padding) when (length(@padding) >= 2){
    @padding-right: extract(@padding, 2);
    @padding-left: extract(@padding, 2);
  }
  .padding(@padding) when (length(@padding) >= 3){
    @padding-bottom: extract(@padding, 3);
  }
  .padding(@padding) when (length(@padding) = 4){
    @padding-left: extract(@padding, 4);
  }
  .padding-compute(){
    @padding-base : @font-base * @ratio;
    @padding-computed : floor(@padding-base * @padding-top) floor(@padding-base * @padding-right) floor(@padding-base * @padding-bottom) floor(@padding-base * @padding-left);
  }
  .render(){
    font-size: @font-base;
    line-height: ceil(@font-base * @line-height-computed);
    min-height: ceil(@font-base * @line-height-computed) + floor(@padding-base * @padding-top) + floor(@padding-base * @padding-bottom) + 2;
    padding: @padding-computed;
  }
  @template();
  .fn();
  .render();
}

.ctrl-colors{
  .each(@colors, @template){
    .map.each(@colors, {
      .fn(@key, @val){
        &.btn-@{key}{     
          .ctrl-colors(@val, @template);
        }
      }
    });
  }
}
.ctrl-colors(@color; @template: @fn; @default: @btn-style-default){
  .style(@bg-modifier: 0; @bg-color: @color; @border-modifier: 0; @border-color: @color; @opacity : 100; @bg-opacity: 100; @border-opacity: 100;){
    @bg-add: max(0, @bg-modifier/100) * #fff;
    @bg-substract: max(0, @bg-modifier/(-100)) * #fff;
    @bg-color-computed: @bg-color;
    @border-add: max(0, @border-modifier/100) * #fff;
    @border-substract: max(0, @border-modifier/(-100)) * #fff;
    @border-color-computed: @border-color;
    @opacity-computed: @opacity / 100;
    @bg-opacity-computed: @bg-opacity / 100;
    @border-opacity-computed: @border-opacity / 100;
  }
  .normal(@ratio : 0; @modifier: 0; @opacity : 100; @bg-opacity: 100; @border-opacity: 100; @saturate: 0; @bg-color: @null; @border-color: @null){
    @normal-ratio: (100 + @ratio) / 100;
    @normal-saturation: @saturate;
    @normal-add: max(0, @modifier/100) * #fff;
    @normal-substract: max(0, @modifier/(-100)) * #fff;   
    @normal-opacity: @opacity / 100;
    @bg-normal-opacity: @bg-opacity / 100;
    @border-normal-opacity: @border-opacity / 100;
    @bg-color-normal: @bg-color;
    @border-color-normal: @border-color;
  }
  .hover(@ratio : 0; @modifier: 0; @opacity : 100; @bg-opacity: 100; @border-opacity: 100; @saturate: 0; @bg-color: @null; @border-color: @null){
    @hover-ratio: (100 + @ratio) / 100;
    @hover-saturation: @saturate;
    @hover-add: max(0, @modifier/100) * #fff;
    @hover-substract: max(0, @modifier/(-100)) * #fff;    
    @hover-opacity: @opacity / 100;
    @bg-hover-opacity: @bg-opacity / 100;
    @border-hover-opacity: @border-opacity / 100;
    @bg-color-hover: @bg-color;
    @border-color-hover: @border-color;
  }
  .focus(@ratio : 0; @modifier: 0; @opacity : 100; @bg-opacity: 100; @border-opacity: 100; @saturate: 0; @bg-color: @null; @border-color: @null){
    @focus-ratio: (100 + @ratio) / 100;   
    @focus-saturation: @saturate;
    @focus-add: max(0, @modifier/100) * #fff;
    @focus-substract: max(0, @modifier/(-100)) * #fff;    
    @focus-opacity: @opacity / 100;
    @bg-focus-opacity: @bg-opacity / 100;
    @border-focus-opacity: @border-opacity / 100;
    @bg-color-focus: @bg-color;
    @border-color-focus: @border-color;
  }
  .active(@ratio : 0; @modifier: 0; @opacity : 100; @bg-opacity: 100; @border-opacity: 100; @saturate: 0; @bg-color: @null; @border-color: @null){
    @active-ratio: (100 + @ratio) / 100;    
    @active-saturation: @saturate;
    @active-add: max(0, @modifier/100) * #fff;
    @active-substract: max(0, @modifier/(-100)) * #fff;   
    @active-opacity: @opacity / 100;
    @bg-active-opacity: @bg-opacity / 100;
    @border-active-opacity: @border-opacity / 100;
    @bg-color-active: @bg-color;
    @border-color-active: @border-color;
  }
  .compute() when (@bg-color-normal = @null) { @bg-color-normal-computed : @bg-color-computed; }
  .compute() when (@bg-color-hover = @null) { @bg-color-hover-computed : @bg-color-computed; }
  .compute() when (@bg-color-focus = @null) { @bg-color-focus-computed : @bg-color-computed; }
  .compute() when (@bg-color-active = @null) { @bg-color-active-computed : @bg-color-computed; }
  .compute() when not (@bg-color-normal = @null) { @bg-color-normal-computed : @bg-color-normal; }
  .compute() when not (@bg-color-hover = @null) { @bg-color-hover-computed : @bg-color-hover; }
  .compute() when not (@bg-color-focus = @null) { @bg-color-focus-computed : @bg-color-focus; }
  .compute() when not (@bg-color-active = @null) { @bg-color-active-computed : @bg-color-active; }

  .compute() when (@border-color-normal = @null) { @border-color-normal-computed : @border-color-computed; }
  .compute() when (@border-color-hover = @null) { @border-color-hover-computed : @border-color-computed; }
  .compute() when (@border-color-focus = @null) { @border-color-focus-computed : @border-color-computed; }
  .compute() when (@border-color-active = @null) { @border-color-active-computed : @border-color-computed; }
  .compute() when not (@border-color-normal = @null) { @border-color-normal-computed : @border-color-normal; }
  .compute() when not (@border-color-hover = @null) { @border-color-hover-computed : @border-color-hover; }
  .compute() when not (@border-color-focus = @null) { @border-color-focus-computed : @border-color-focus; }
  .compute() when not (@border-color-active = @null) { @border-color-active-computed : @border-color-active; }
  
  .render(){
    background: fade(@bg-color-normal-computed, @opacity-computed * @bg-opacity-computed * 100);
    border-color: fade(@border-color-normal-computed + @border-add - @border-substract, @opacity-computed * @border-opacity-computed * 100);
    &:hover{
      background: fade(saturate(@bg-color-hover-computed * @hover-ratio, @hover-saturation) + @hover-add - @hover-substract, @hover-opacity * @bg-hover-opacity * 100);
      border-color: fade(saturate(@border-color-hover-computed * @hover-ratio, @hover-saturation) + @hover-add - @hover-substract + @border-add - @border-substract, @hover-opacity * @border-hover-opacity * 100);
    }
    &:focus{
      background: fade(saturate(@bg-color-focus-computed * @focus-ratio, @focus-saturation)  + @focus-add - @focus-substract, @focus-opacity * @bg-focus-opacity * 100);
      border-color: fade(saturate(@border-color-focus-computed * @focus-ratio, @focus-saturation) + @focus-add - @focus-substract + @border-add - @border-substract, @focus-opacity * @border-focus-opacity * 100);
    }
    &:active{
      background: fade(saturate(@bg-color-active-computed * @active-ratio, @active-saturation) + @active-add - @active-substract, @active-opacity * @bg-active-opacity * 100);
      border-color: fade(saturate(@border-color-active-computed * @active-ratio, @active-saturation) + @active-add - @active-substract + @border-add - @border-substract, @active-opacity * @border-active-opacity * 100);
    }
  }
  @template();
  .fn();
  @default();
  .fn();
  .compute();
  .render();
}


.form-controls(){
  .form-group{
    &:extend(.clearfix all);

    margin-top: @grid-gutter-width / 2;
    &:first-child{
      margin-top: 0;
    }
    .input-label{
      display: block;
      width: 100%;
      float: left;
      margin-bottom: 5px;
    }
    .text-control, .input-group{
      width: 100%;
    }
    .media.map(min, {
      .fn(@size){
        form.horizontal-@{size} & .input-label{
          width: 120px;
          & + .text-control, & + .input-group{
            width: ~"calc(100% - 120px)";
            & + .error-msg{
              padding-left: 120px;
            }
          }
          & + .cgroup{
            margin-top: 0px;
          }
        }
      }
    });
    form  & .input-label{
      & + .text-control, & + .input-group{
        width: 100%;
      }
    }
  }
  .checkbox, .radiobutton{
    .cgroup-horizontal .c-item + .c-item{
      margin-left: 20px;
    }
    .cgroup-vertical .c-item{
      display: block;
    }
    .cgroup{
      margin-top: 10px;
    }

    .cgroup-horizontal .c-item + .c-item{
      margin-left: 20px;
    }
    .cgroup-vertical .c-item{
      display: block;
    }
    .cgroup{
      margin-top: 10px;
    }
  }  

  .input-group{
    display: inline-table;
    > input{
      float: left;
    }
    .text-control{
      display: table-cell;
      width: 100%;
    }
  }
  
  .input-group-addon{
    // border-radius: 4px;
    &:extend(.gui all);
    display: table-cell;
    vertical-align: middle;
    width: 1px;
    background: #aaa;
    border-color: #aaa;
    color: #555;
    .text-control{
      &:not(:first-child){
        .border-left-radius(0);
      }
      &:not(:last-child){
        .border-right-radius(0);
      }
    }
    &:not(:last-child) {
      .border-right-radius(0);
    }
    &:not(:first-child) {
      .border-left-radius(0);
    }
  }
}

.error-msg{
  display: none;
  font-size: .8125em;
  padding-top: 10px;
}

.text-control.error{
  color: @brand-danger;
}

.cgroup .c-item > input:focus{
  outline: 0 none;
  & + .radio-label,
  & + .checkbox-label{
    background: fade(#333, 15);
    box-shadow: 0 0 0 2px fade(#333, 15);
    border-radius: 2px;
    padding-left: 2px;
    padding-right: 2px;
  }
}